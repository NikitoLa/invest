# Generated by Django 4.2.8 on 2024-05-30 22:25

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Assets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset', models.CharField(max_length=100, verbose_name='актив')),
                ('age', models.IntegerField(verbose_name='Возраст компании')),
                ('d_div_e', models.FloatField(verbose_name='Отношение долга компании к ее капиталу (D/E)')),
                ('eps', models.FloatField(verbose_name='Чистая прибыль на 1 акцию (EPS)')),
                ('p_div_e', models.FloatField(verbose_name='Переоценка акций (P/E)')),
                ('p_div_bv', models.FloatField(verbose_name='Отношение капитализации к собственному капиталу (P/BV)')),
                ('p_div_s', models.FloatField(verbose_name='Отношение капиталищации к общей выручке(P/S)')),
                ('ev_div_ebitda', models.FloatField(verbose_name='Отношение стоимости компании к прибыли (EV/EBITDA)')),
                ('roe', models.FloatField(verbose_name='Чистая прибыль к собственному капиталу (ROE)')),
                ('roa', models.FloatField(verbose_name='Чистая прибыль к средней стоимости активов (ROA)')),
                ('roe_min_roa_abs', models.FloatField(verbose_name='Абсолютная разница ROE и ROA')),
                ('gross_margin', models.FloatField(verbose_name='Валовая прибыль к выручке gross margin')),
                ('ncav', models.FloatField(verbose_name='Чистая стоимость активов компании (NCAV)')),
                ('asset_diff', models.FloatField(verbose_name='Изменение цены акции за последний год (%)')),
            ],
            options={
                'verbose_name': 'Бумага',
                'verbose_name_plural': 'Бумаги',
                'db_table': 'asset',
            },
        ),
        migrations.CreateModel(
            name='Indicators',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=300, unique=True, verbose_name='Вопрос')),
            ],
            options={
                'verbose_name': 'Индикатор',
                'verbose_name_plural': 'Индикаторы',
                'db_table': 'indicator',
            },
        ),
        migrations.CreateModel(
            name='Questions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=300, unique=True, verbose_name='вопрос')),
                ('target_score', models.IntegerField(verbose_name='Таргетированный показатель')),
            ],
            options={
                'verbose_name': 'Вопрос',
                'verbose_name_plural': 'Вопросы',
                'db_table': 'question',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('patronymic', models.CharField(max_length=300, verbose_name='Отчество')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователя',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
